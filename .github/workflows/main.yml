name: DevTest with Lys Agent

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  devtest-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run Maven Test and Capture Logs
        id: run_tests
        run: |
          # Use o comando `mvn verify` para que a meta `check` do JaCoCo seja executada.
          # A pipeline irá falhar aqui se a cobertura não atingir o mínimo.
          mvn clean verify
        continue-on-error: true # Permite que a pipeline continue mesmo em caso de falha

      - name: Set error log if tests failed
        if: steps.run_tests.outcome == 'failure'
        run: |
          echo "error_log=A verificação de cobertura de testes do JaCoCo falhou. O projeto não atingiu o limite mínimo de cobertura. Verifique o log do passo 'Run Maven Test and Capture Logs' para detalhes." >> $GITHUB_ENV

      # Os passos a seguir são executados apenas se a etapa 'Run Maven Test' falhar
      - name: Authenticate with StackSpot and get JWT
        id: auth
        if: steps.run_tests.outcome == 'failure'
        run: |
          # Ativa o modo de depuração para mostrar os comandos executados
          set -x
          
          JWT_RESPONSE=$(curl -s -X POST "https://idm.stackspot.com/${{ secrets.REALM }}/oidc/oauth/token" \
            -H 'Content-Type: application/x-www-form-urlencoded' \
            -d 'grant_type=client_credentials' \
            -d "client_id=${{ secrets.CLIENT_ID }}" \
            -d "client_secret=${{ secrets.CLIENT_SECRET }}")
          
          echo "------------------------------------"
          echo "Resposta completa da API de autenticação para debug:"
          echo "$JWT_RESPONSE"
          echo "------------------------------------"
          
          # Extrai o JWT da resposta JSON
          JWT=$(echo "$JWT_RESPONSE" | jq -r '.access_token')
          
          if [ "$JWT" = "null" ] || [ -z "$JWT" ]; then
            echo "::error::Falha na autenticação. O JWT está nulo ou vazio."
            exit 1
          fi

          echo "JWT=$JWT" >> $GITHUB_ENV

      - name: Send error log to Lys via cURL
        if: steps.run_tests.outcome == 'failure'
        env:
          JWT: ${{ env.JWT }}
          ERROR_LOG: ${{ env.error_log }}
        run: |
          RESPONSE=$(curl 'https://genai-inference-app.stackspot.com/v1/agent/765240/chat' \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer ${{ env.JWT }}" \
            -d "{
              \"streaming\": false,
              \"user_prompt\": \"$ERROR_LOG\",
              \"stackspot_knowledge\": false,
              \"return_ks_in_response\": true
            }")
          
          echo "Resposta bruta da Lys (para depuração):"
          echo "$RESPONSE" > lys_response.txt

      - name: Save Lys response as artifact
        if: steps.run_tests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: lys-analysis
          path: lys_response.txt